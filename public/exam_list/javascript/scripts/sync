#!/usr/bin/env node

/**
 * Run this script (from root directory): npx babel-node scripts/sync
 *
 * This script is used to copy the following files to all exercises and keep
 * them in sync:
 *
 * - .eslintrc
 * - babel.config.js
 * - package.json (modified version)
 * - .npmrc
 *
 * There is a CI step which checks that package.json in root & exercises match
 * (see checksum script for more info).
 */

const shell = require('shelljs');
const assignment = shell.env['ASSIGNMENT'];
const helpers = require('./helpers');
const path = require('path');

function copyConfigForAssignment(assignment) {
  const destination = path.join('exercises', assignment);
  const assignmentPackageFilename = path.join(destination, 'package.json');

  const packageJson = getCurrentPackageJson(assignmentPackageFilename);
  const basePackageJson = JSON.parse(
    shell.cat('exercise-package.json').toString()
  );
  const mergedPackageJson = helpers.mergePackageJsons(
    basePackageJson,
    packageJson,
    assignment
  );

  shell
    .ShellString(JSON.stringify(mergedPackageJson, undefined, 2) + '\n')
    .to(assignmentPackageFilename);

  ['.eslintrc', '.npmrc', 'babel.config.js', 'LICENSE', '.gitignore'].forEach(
    (file) => {
      shell.cp(file, destination);
    }
  );
}

function getCurrentPackageJson(assignmentPackageFilename) {
  const packageFile = shell.cat(assignmentPackageFilename).toString();
  if (!packageFile) {
    const packageJson = JSON.parse(
      shell.cat('exercise-package.json').toString()
    );

    const conceptName = path
      .dirname(assignmentPackageFilename)
      .split(/[/\\]/g)
      .slice(1);

    packageJson.name = `@exercism/javascript-${conceptName.join('-')}`;
    packageJson.description = `Exercism ${conceptName[0]} exercise on ${conceptName[1]}`;
    return packageJson;
  }

  return JSON.parse(packageFile);
}

helpers.registerExitHandler();
helpers.createExercisePackageJson(false);

if (assignment) {
  if (!helpers.assertAssignment(assignment)) {
    shell.exit(1);
  }

  shell.echo('Syncing ' + assignment + '...');
  copyConfigForAssignment(assignment);
} else {
  shell.echo('Syncing all assignments...');
  helpers.assignments.forEach((assignment) => {
    shell.echo('Syncing ' + assignment + '...');
    copyConfigForAssignment(assignment);
  });
}
